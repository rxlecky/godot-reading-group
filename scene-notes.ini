[res://content/power_pitch/slides/Node.tscn]

note="1.  Nodes are elementary building blocks of each Godot project.
Typically, each node serves a single, very specific purpose.

2. A node, in its essence is just a collection of properties. The notable ones
are: A name by which it is identified. A type, which indicates an initial set
of properties. An optional script, that can extend a default behaviour and
define additional properties.

3. Lastly, the most powerful property of them all - the parent-child
relationships. Each node can have a single parent and any number of
children, effectively creating a tree structure. The whole engine is built
around this concept. Arranging nodes with a simple bahaviour into a tree
is the way complex behaviours are modelled in Godot"

[res://content/power_pitch/slides/Scene.tscn]

note="1. If nodes are building blocks of a Godot project, scenes are independent,
fully functioning structures built from these blocks. This is where Godot
differs the most from the other engines. The scene is used to describe all
types and scales of \"units\".

2. The scene is, in itself nothing more than a tree of nodes - and other
scenes. This makes the concept of a scene scale naturally and apply to
a prop, an enemy, a trap, a city,  and the whole game world. It also
allows to break down the game into logical units of a required granualrity.
This reduces the friction between team members collaborating on the
project, allowing them to work without stepping onm each other's toes. 

3. Lastly, a scene can be added and removed from the world on runtime as
needed. This makes scenes apply to  dynamic game elements such as 
projectiles, particles, pickups and enemies. Adding and removing scenes
is merely adding and removing them from the global scene tree."

[res://content/power_pitch/slides/GDSCript.tscn]

note="1. GDScript is a custom built-in scripting language. Syntax wise it is similar
to Python, making it very easy to read and understand.

2. Unlike Python, however, it is not designed to be general-purpose
langugage. Quite the opposite, it is designed with simplicity in mind.
It is still evolving but it is true to its promise to be easy to pick-up.

3. It is designed for Godot and hence is tightly integrated into the engine.
There's even a GDScript editor built into the engine. This has some obvious
advanatges such as autocompletion that can use  data directly from the
project, but also language features that are specific to game development
needs."

[res://content/power_pitch/slides/Modular.tscn]

note="Twice as fast as Unity
Twice as small
(similar to Unity packages)"
